package main

// 合并两个有序数组
// 题目：将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。

// 思路：类似于寻找两个有序数组中位数，不过这里是两个链表。
// 最原始的思路：初始化虚拟头结点，prev指向虚拟头结点，同时遍历链表l1和l2，比较两个链表头结点值：较小的头结点插入prev结点，prev后移，循环结束条件是其中一个链表头节点为null。
// 但是在寻找两个有序数组用到了二分法，因此这里也联想到用二分法思路：递归每次比较两个数组的第k/2个数的大小，直接跳过了k/2个数；但是不知道链表的长度，需要先遍历两个链表求出链表长度，但时间复杂度就跟上面一样了。
// 空间复杂度上能否不初始化第三个链表，直接在原链表进行？
func mergeTwoLists(l1 *ListNode, l2 *ListNode) {

}
